Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    BOOLEANO
    DIVISION
    FLOAT
    FUN
    IF
    INPUT
    INT
    MAS
    MENOS
    MULTIPLICACION
    PRINT
    STRING
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> START LPARENT RPARENT LBRACKET statementList RBRACKET
Rule 2     statementList -> statement statementList
Rule 3     statementList -> empty
Rule 4     statement -> ID IGUAL expression PUNTOCOMA
Rule 5     expression -> ID
Rule 6     expression -> valor
Rule 7     valor -> CADENA
Rule 8     valor -> ENTERO
Rule 9     valor -> FLOTANTE
Rule 10    statement -> empty
Rule 11    empty -> <empty>

Terminals, with rules where they appear

BOOLEAN              : 
BOOLEANO             : 
CADENA               : 7
DIVISION             : 
ENTERO               : 8
FLOAT                : 
FLOTANTE             : 9
FUN                  : 
ID                   : 4 5
IF                   : 
IGUAL                : 4
INPUT                : 
INT                  : 
LBRACKET             : 1
LPARENT              : 1
MAS                  : 
MENOS                : 
MULTIPLICACION       : 
PRINT                : 
PUNTOCOMA            : 4
RBRACKET             : 1
RPARENT              : 1
START                : 1
STRING               : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

empty                : 3 10
expression           : 4
program              : 0
statement            : 2
statementList        : 1 2
valor                : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START LPARENT RPARENT LBRACKET statementList RBRACKET

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . LPARENT RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 3


state 3

    (1) program -> START LPARENT . RPARENT LBRACKET statementList RBRACKET

    RPARENT         shift and go to state 4


state 4

    (1) program -> START LPARENT RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 5


state 5

    (1) program -> START LPARENT RPARENT LBRACKET . statementList RBRACKET
    (2) statementList -> . statement statementList
    (3) statementList -> . empty
    (4) statement -> . ID IGUAL expression PUNTOCOMA
    (10) statement -> . empty
    (11) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 9
    RBRACKET        reduce using rule 11 (empty -> .)

  ! ID              [ reduce using rule 11 (empty -> .) ]

    statementList                  shift and go to state 6
    statement                      shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) program -> START LPARENT RPARENT LBRACKET statementList . RBRACKET

    RBRACKET        shift and go to state 10


state 7

    (2) statementList -> statement . statementList
    (2) statementList -> . statement statementList
    (3) statementList -> . empty
    (4) statement -> . ID IGUAL expression PUNTOCOMA
    (10) statement -> . empty
    (11) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 9
    RBRACKET        reduce using rule 11 (empty -> .)

  ! ID              [ reduce using rule 11 (empty -> .) ]

    statement                      shift and go to state 7
    statementList                  shift and go to state 11
    empty                          shift and go to state 8

state 8

    (3) statementList -> empty .
    (10) statement -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 3 (statementList -> empty .)
    RBRACKET        reduce using rule 3 (statementList -> empty .)
    ID              reduce using rule 10 (statement -> empty .)

  ! RBRACKET        [ reduce using rule 10 (statement -> empty .) ]


state 9

    (4) statement -> ID . IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 12


state 10

    (1) program -> START LPARENT RPARENT LBRACKET statementList RBRACKET .

    $end            reduce using rule 1 (program -> START LPARENT RPARENT LBRACKET statementList RBRACKET .)


state 11

    (2) statementList -> statement statementList .

    RBRACKET        reduce using rule 2 (statementList -> statement statementList .)


state 12

    (4) statement -> ID IGUAL . expression PUNTOCOMA
    (5) expression -> . ID
    (6) expression -> . valor
    (7) valor -> . CADENA
    (8) valor -> . ENTERO
    (9) valor -> . FLOTANTE

    ID              shift and go to state 13
    CADENA          shift and go to state 16
    ENTERO          shift and go to state 17
    FLOTANTE        shift and go to state 18

    expression                     shift and go to state 14
    valor                          shift and go to state 15

state 13

    (5) expression -> ID .

    PUNTOCOMA       reduce using rule 5 (expression -> ID .)


state 14

    (4) statement -> ID IGUAL expression . PUNTOCOMA

    PUNTOCOMA       shift and go to state 19


state 15

    (6) expression -> valor .

    PUNTOCOMA       reduce using rule 6 (expression -> valor .)


state 16

    (7) valor -> CADENA .

    PUNTOCOMA       reduce using rule 7 (valor -> CADENA .)


state 17

    (8) valor -> ENTERO .

    PUNTOCOMA       reduce using rule 8 (valor -> ENTERO .)


state 18

    (9) valor -> FLOTANTE .

    PUNTOCOMA       reduce using rule 9 (valor -> FLOTANTE .)


state 19

    (4) statement -> ID IGUAL expression PUNTOCOMA .

    ID              reduce using rule 4 (statement -> ID IGUAL expression PUNTOCOMA .)
    RBRACKET        reduce using rule 4 (statement -> ID IGUAL expression PUNTOCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for ID in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (statementList -> empty)
WARNING: rejected rule (statement -> empty) in state 8
