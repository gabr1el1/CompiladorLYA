
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN BOOLEANO CADENA DIVISION ENTERO FLOAT FLOTANTE FUN ID IF IGUAL INPUT INT LBRACKET LPARENT MAS MENOS MULTIPLICACION PRINT PUNTOCOMA RBRACKET RPARENT START STRING WHILEprogram : START LPARENT RPARENT LBRACKET statementList RBRACKET statementList : statement statementListstatementList : emptystatement : ID IGUAL expression PUNTOCOMAexpression : IDexpression : valorvalor : CADENAvalor : ENTEROvalor : FLOTANTEstatement : emptyempty :'
    
_lr_action_items = {'START':([0,],[2,]),'$end':([1,10,],[0,-1,]),'LPARENT':([2,],[3,]),'RPARENT':([3,],[4,]),'LBRACKET':([4,],[5,]),'ID':([5,7,8,12,19,],[9,9,-10,13,-4,]),'RBRACKET':([5,6,7,8,11,19,],[-11,10,-11,-3,-2,-4,]),'IGUAL':([9,],[12,]),'CADENA':([12,],[16,]),'ENTERO':([12,],[17,]),'FLOTANTE':([12,],[18,]),'PUNTOCOMA':([13,14,15,16,17,18,],[-5,19,-6,-7,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statementList':([5,7,],[6,11,]),'statement':([5,7,],[7,7,]),'empty':([5,7,],[8,8,]),'expression':([12,],[14,]),'valor':([12,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> START LPARENT RPARENT LBRACKET statementList RBRACKET','program',6,'p_program','AnalizadorSintactico.py',15),
  ('statementList -> statement statementList','statementList',2,'p_statementList1','AnalizadorSintactico.py',19),
  ('statementList -> empty','statementList',1,'p_statementListEmpty','AnalizadorSintactico.py',23),
  ('statement -> ID IGUAL expression PUNTOCOMA','statement',4,'p_statement','AnalizadorSintactico.py',28),
  ('expression -> ID','expression',1,'p_expression1','AnalizadorSintactico.py',33),
  ('expression -> valor','expression',1,'p_expression2','AnalizadorSintactico.py',37),
  ('valor -> CADENA','valor',1,'p_valor1','AnalizadorSintactico.py',42),
  ('valor -> ENTERO','valor',1,'p_valor2','AnalizadorSintactico.py',46),
  ('valor -> FLOTANTE','valor',1,'p_valor3','AnalizadorSintactico.py',50),
  ('statement -> empty','statement',1,'p_statementEmpty','AnalizadorSintactico.py',54),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',59),
]
